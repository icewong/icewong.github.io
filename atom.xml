<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>垃圾中的小钻石</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2018-05-22T01:11:48.000Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>icewong</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Lua--变量</title>
    <link href="http://yoursite.com/2018/05/22/Lua-%E5%8F%98%E9%87%8F/"/>
    <id>http://yoursite.com/2018/05/22/Lua-变量/</id>
    <published>2018-05-22T00:51:04.000Z</published>
    <updated>2018-05-22T01:11:48.000Z</updated>
    
    <content type="html"><![CDATA[<p>1   变量在使用前，必须在代码中进行声明，即创建改变量；<br>    Lua的变量类型：全局变量、局部变量、表中的域；<br>    Lua的变量全是全局变量，即便是语句块或者是函数里，除非使用local显示声明为局部变量；<br>    局部变量的作用域从声明的位置开始，到所在语句块结束；<br>    变量的默认值均为nil;</p><p>2 赋值<br>   Lua可以对多个变量同时赋值，变量列表和值列表的各个元素用逗号分开，赋值语句右边的值会依次赋给左边的变量</p><pre><code>eg:   a, b = 10, 2*x       等价于       a=10; b=2*x</code></pre><p>  当变量个数和值的个数不一致时，Lua会一直以变量个数为基础采取以下策略：</p><pre><code>1） 变量个数 &gt; 值的个数             按变量个数补足nil2）变量个数 &lt; 值的个数             多余的值会被忽略</code></pre><p>  多值赋值经常用来交换变量，或将函数调用返回给变量：</p><pre><code>eg:   a, b = f()   f()返回两个值，第一个赋给a，第二个赋给b。</code></pre><p>  应该尽可能的使用局部变量，有两个好处：</p><pre><code>1. 避免命名冲突。2. 访问局部变量的速度比全局变量更快。</code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;1   变量在使用前，必须在代码中进行声明，即创建改变量；&lt;br&gt;    Lua的变量类型：全局变量、局部变量、表中的域；&lt;br&gt;    Lua的变量全是全局变量，即便是语句块或者是函数里，除非使用local显示声明为局部变量；&lt;br&gt;    局部变量的作用域从声明的位置开
      
    
    </summary>
    
      <category term="脚本学习" scheme="http://yoursite.com/categories/%E8%84%9A%E6%9C%AC%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="Lua" scheme="http://yoursite.com/tags/Lua/"/>
    
  </entry>
  
  <entry>
    <title>Lua--基本数据类型</title>
    <link href="http://yoursite.com/2018/05/21/Lua-%E5%9F%BA%E6%9C%AC%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/"/>
    <id>http://yoursite.com/2018/05/21/Lua-基本数据类型/</id>
    <published>2018-05-21T07:44:28.000Z</published>
    <updated>2018-05-21T10:02:54.000Z</updated>
    
    <content type="html"><![CDATA[<p>   我们要明确一个前提：Lua是动态型语言，变量是不需要类型定义，只需要为变量赋值。值可以存储在变量中，最为参数传递或结果返回。<br>一 基本类型<br>   Lua有8个基本类型：nil、boolean、number、string、userdata、function、thread、table</p><p>   1 nil<br>      表示一个无效的值，在条件表达式中相当于false<br>    2 boolean<br>       false和ture<br>    3 number<br>       表示双精度类型的实浮点数<br>    4 string<br>       字符串由一对双引号或单引号来表示<br>    5 function<br>       用C或者Lua写的函数<br>    6 userdata<br>       用来表示任意存储在变量中的C数据结构<br>    7 thread<br>       表示执行的独立线路，用于执行协同程序<br>    8 table<br>    Lua中的表（table）其实就是一个‘关联数组’（associative arrays），数组的索引可以是数字或者是字符串。在Lua中，table的创建是通过“构造表达式”来完成，例如最简单的表达式{}，用来创建一个空表。<br>二 简单例子<br>  1  我们可以使用type函数来测试指定变量或者值的类型</p><pre><code>eg：WangBingdeMacBook-Pro:Hexo wangbing$ lua -iLua 5.3.3  Copyright (C) 1994-2016 Lua.org, PUC-Rio&gt; print(type(&quot;Lua test&quot;))string&gt; print(type(100*1.2))number&gt; print(type(type))function&gt; print(type(false))boolean&gt;</code></pre><p>   2 nil<br>       对于全局变量和table，nil还意味着“删除”操作。给全局变量或者table表里的变量一个nil值,相当于把他们删掉。<br>       nil在进行比较的时候，需要加上双引号”:</p><pre><code>eg：&gt;&gt; type(X)==nilstdin:9: unexpected symbol near &apos;==&apos;&gt; type(X)==&quot;nil&quot;true</code></pre><p>   3 boolean（布尔）<br>     Lua中把false和nil看做“假”，其他都为真</p><p>  4 number(数字)<br>     Lua默认只有一种number类型，–double（双精度）类型<br>  5 string （字符串）<br>     用一堆双引号或者单引号表示，也可以用2个方括号“[[]]”来表示“一块”字符串</p><pre><code>eg：&gt; string1 = &quot;SkyLigt 001&quot;&gt; string2 = &apos;SkyLigt 002&apos;&gt; string3 = [[&lt;html&gt;&lt;head&gt;&lt;/head&gt;&lt;body&gt;&lt;a href=&quot;www.baidu.com/&quot;&gt;Lua学习&lt;/a&gt;&lt;/body&gt;&lt;/html&gt;]]&gt; print(string1)SkyLigt 001&gt; print(string2)SkyLigt 002&gt; print(string3)&lt;html&gt;&lt;head&gt;&lt;/head&gt;&lt;body&gt;&lt;a href=&quot;www.baidu.com/&quot;&gt;Lua学习&lt;/a&gt;&lt;/body&gt;&lt;/html&gt;&gt;</code></pre><p>  在对一个数字字符串进行算术操作时，Lua会尝试将这个数字字符串转成一个数字</p><pre><code>eg:&gt; print(&quot;2&quot; + 10)12.0&gt;</code></pre><p>字符串的连接使用 ..表示</p><pre><code>eg：&gt; print(&quot;zhangsan&quot;..&quot;is studying&quot;..&quot;Lua&quot;)zhangsanis studyingLua&gt;</code></pre><p> 字符串的长度使用#表示</p><pre><code>eg：&gt; stringLength = &quot;www.apple.com.hk&quot;&gt; print(#stringLength)16&gt;</code></pre><p>6 table (表)<br>   在Lua中，table的创建是通过”构造表达式”。最简单构造表达式是{}，用来创建一个空表。也可以在表里添加一些数据，直接初始化表</p><pre><code>eg:-- 创建一个空的 tablelocal tbl1 = {}-- 直接初始表local tbl2 = {&quot;iOS Team&quot;, &quot;xxxxxx&quot;, &quot;Android Team&quot;, &quot;xxxx&quot;}</code></pre><p>   Lua 中的表（table）其实是一个”关联数组”（associative arrays），数组的索引可以是数字或者是字符串.<br>   不同于其他语言的数组把 0 作为数组的初始索引，在 Lua 里表的默认初始索引一般以 1 开始。<br>   table 不会固定长度大小，有新数据添加时 table 长度会自动增长，没初始的 table 都是 nil</p><p>7  function（函数）</p><p>  Lua 中，函数是被看作是”第一类值（First-Class Value）”，函数可以存在变量里:<br>  function 可以以匿名函数（anonymous function）的方式通过参数传递</p><p>  8 thread（线程）</p><p>   在 Lua 里，最主要的线程是协同程序（coroutine）。它跟线程（thread）差不多，拥有自己独立的栈、局部变量和指令指针，可以跟其他协同程序共享全局变量和其他大部分东西。<br>  线程跟协程的区别：线程可以同时多个运行，而协程任意时刻只能运行一个，并且处于运行状态的协程只有被挂起（suspend）时才会暂停。</p><p>  9 userdata（自定义类型）</p><p>  userdata 是一种用户自定义数据，用于表示一种由应用程序或 C/C++ 语言库所创建的类型，可以将任意 C/C++ 的任意数据类型的数据（通常是 struct 和 指针）存储到 Lua 变量中调用</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;   我们要明确一个前提：Lua是动态型语言，变量是不需要类型定义，只需要为变量赋值。值可以存储在变量中，最为参数传递或结果返回。&lt;br&gt;一 基本类型&lt;br&gt;   Lua有8个基本类型：nil、boolean、number、string、userdata、function、
      
    
    </summary>
    
      <category term="脚本学习" scheme="http://yoursite.com/categories/%E8%84%9A%E6%9C%AC%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="Lua" scheme="http://yoursite.com/tags/Lua/"/>
    
  </entry>
  
  <entry>
    <title>Lua 初步学习--基本语法</title>
    <link href="http://yoursite.com/2018/05/21/Lua%20%E5%88%9D%E6%AD%A5%E5%AD%A6%E4%B9%A0--%E5%9F%BA%E6%9C%AC%E8%AF%AD%E6%B3%95/"/>
    <id>http://yoursite.com/2018/05/21/Lua 初步学习--基本语法/</id>
    <published>2018-05-21T06:31:52.000Z</published>
    <updated>2018-05-21T08:54:43.000Z</updated>
    
    <content type="html"><![CDATA[<p>1 所谓的“交互式编程”<br>   Lua提供了交互式编程模式,我们可以在命令行中输入程序并立即查看效果。<br>   Lua 交互式编程模式可以通过命令 lua -i 或 lua 来启用</p><p>2 所谓的“脚本式编程”<br>   我们将代码写入.lua文件，然后执行，就是脚本式编程。<br>   eg:<br>   WangBingdeMacBook-Pro:~ wangbing$ cd /Users/wangbing/Desktop/luaDemo<br>   WangBingdeMacBook-Pro:luaDemo wangbing$ ls<br>   helloWord.lua<br>   WangBingdeMacBook-Pro:luaDemo wangbing$ lua helloWord.lua<br>   Hello World!<br>   WangBingdeMacBook-Pro:luaDemo wangbing$</p><p>3 如何进行代码注释<br>   单行注释：–<br>   兑行注释：–[=[注释内容]=]</p><p>4 标志符<br>   1）Lua标志符用来定义一个变量，标志符是以A到Z或者a到z或者下划线_开头加上0个或者多个字母、下划线、数字等<br>   2）但是最好不用使用下划线加大写字母，因为Lua的保留字是这样的规则；<br>   3）Lua不允许使用特殊字符如@ $和%来定义标志符<br>   4)  Lua是区分大小写的</p><p>5 全局变量<br>   1）访问在默认的情况下，变量总是被认为是一个全局的。<br>   2）全局变量是不需要声明的，给一个变量赋值后即创建了这个全局变量<br>   3）访问一个没有初始化的全局变量也是不会出错的，只是的到值是nil</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;1 所谓的“交互式编程”&lt;br&gt;   Lua提供了交互式编程模式,我们可以在命令行中输入程序并立即查看效果。&lt;br&gt;   Lua 交互式编程模式可以通过命令 lua -i 或 lua 来启用&lt;/p&gt;
&lt;p&gt;2 所谓的“脚本式编程”&lt;br&gt;   我们将代码写入.lua文件，然
      
    
    </summary>
    
      <category term="脚本学习" scheme="http://yoursite.com/categories/%E8%84%9A%E6%9C%AC%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="Lua" scheme="http://yoursite.com/tags/Lua/"/>
    
  </entry>
  
  <entry>
    <title>Mac 上安装Lua</title>
    <link href="http://yoursite.com/2018/05/21/Mac-%E4%B8%8A%E5%AE%89%E8%A3%85Lua/"/>
    <id>http://yoursite.com/2018/05/21/Mac-上安装Lua/</id>
    <published>2018-05-21T06:13:34.000Z</published>
    <updated>2018-05-21T08:55:08.000Z</updated>
    
    <content type="html"><![CDATA[<pre><code>我使用的版本是5.3.3,在命令端按照以下输入：Step1:打开命令终端Step2:curl -R -O http://www.lua.org/ftp/lua-5.3.0.tar.gzStep3:tar zxf lua-5.3.0.tar.gzStep4:cd lua-5.3.0Step5:make macosx testStep6:sudo make install执行完Step6后会要求你输入密码，你的电脑登录密码，安装完成后输入 lua -v回车显示：Lua 5.3.3  Copyright (C) 1994-2016 Lua.org, PUC-Rio此时表示已经安装成功。备注：如果Step6直接使用 make install，可能会提示权限问题cd src &amp;&amp; mkdir -p /usr/local/bin /usr/local/include /usr/local/lib /usr/local/man/man1 /usr/local/share/lua/5.3 /usr/local/lib/lua/5.3mkdir: /usr/local/include: Permission deniedmkdir: /usr/local/man/man1: Permission deniedmkdir: /usr/local/share/lua/5.3: Permission deniedmkdir: /usr/local/lib/lua/5.3: Permission deniedmake: *** [install] Error 1</code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;pre&gt;&lt;code&gt;我使用的版本是5.3.3,在命令端按照以下输入：
Step1:打开命令终端
Step2:curl -R -O http://www.lua.org/ftp/lua-5.3.0.tar.gz
Step3:tar zxf lua-5.3.0.tar.gz
Ste
      
    
    </summary>
    
      <category term="脚本学习" scheme="http://yoursite.com/categories/%E8%84%9A%E6%9C%AC%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="Lua" scheme="http://yoursite.com/tags/Lua/"/>
    
  </entry>
  
  <entry>
    <title>C++学习（一）Static 和Const</title>
    <link href="http://yoursite.com/2018/03/27/C-%E5%AD%A6%E4%B9%A0%EF%BC%88%E4%B8%80%EF%BC%89Static-%E5%92%8CConst/"/>
    <id>http://yoursite.com/2018/03/27/C-学习（一）Static-和Const/</id>
    <published>2018-03-27T14:19:26.000Z</published>
    <updated>2018-03-27T15:24:42.000Z</updated>
    
    <content type="html"><![CDATA[<pre><code>1 存储空间的能否被释放  const  修饰的常量在超出作用域后其存储空间会被释放；  static 定义的静态常量在函数执行后不会释放其存储空间。2 static表示静态的。Class的静态成员函数、静态的成员变量是和Class相关的，但不是和该Class的具体某个对象相关的。即便没有具体的对象，也能够调用该Class的静态成员函数和静态成员变量。一般来说，Class的静态成员函数几乎就是一个全局函数，只不过它的作用域局限于包含它的文件中。3 在C++中，static静态成员变量不能在类内部初始化。在累的内部只是声明，定义必须在类定义体的外部，通常在类的实现文件中初始化。  const成员变量也不能在类定义处初始化，只能通过构造函数的初始化列表</code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;pre&gt;&lt;code&gt;1 存储空间的能否被释放
  const  修饰的常量在超出作用域后其存储空间会被释放；
  static 定义的静态常量在函数执行后不会释放其存储空间。

2 static表示静态的。Class的静态成员函数、静态的成员变量是和Class相关的，但不是和该
      
    
    </summary>
    
      <category term="C++学习" scheme="http://yoursite.com/categories/C-%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="C++" scheme="http://yoursite.com/tags/C/"/>
    
  </entry>
  
  <entry>
    <title>iOS LaunchImage</title>
    <link href="http://yoursite.com/2018/03/12/iOS-LaunchImage/"/>
    <id>http://yoursite.com/2018/03/12/iOS-LaunchImage/</id>
    <published>2018-03-12T03:12:03.000Z</published>
    <updated>2018-03-12T03:16:26.000Z</updated>
    
    <content type="html"><![CDATA[<pre><code>说起来汗颜，竟然不记得尺寸了！iPhone Portrait iOS X-Retina        （1125×2436） @3xiPhone Portrait iOS 8-Retina HD 5.5 （1242×2208） @3xiPhone Portrait iOS 8-Retina HD 4.7 （750×1334）  @2xiPhone Portrait iOS 7,8-2x           （640×960）  @2xiPhone Portrait iOS 7,8-Retina 4    （640×1136）  @2xiPhone Portrait iOS 5,6-1x            （320×480） @1xiPhone Portrait iOS 5,6-2x            （640×960） @2xiPhone Portrait iOS 5,6-Retina4      （640×1136） @2x</code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;pre&gt;&lt;code&gt;说起来汗颜，竟然不记得尺寸了！
iPhone Portrait iOS X-Retina        （1125×2436） @3x
iPhone Portrait iOS 8-Retina HD 5.5 （1242×2208） @3x
iPhone Po
      
    
    </summary>
    
      <category term="iOS开发" scheme="http://yoursite.com/categories/iOS%E5%BC%80%E5%8F%91/"/>
    
    
      <category term="iOS" scheme="http://yoursite.com/tags/iOS/"/>
    
  </entry>
  
  <entry>
    <title>iOS知识点温习（2）</title>
    <link href="http://yoursite.com/2018/03/08/iOS%E7%9F%A5%E8%AF%86%E7%82%B9%E6%B8%A9%E4%B9%A0%EF%BC%882%EF%BC%89/"/>
    <id>http://yoursite.com/2018/03/08/iOS知识点温习（2）/</id>
    <published>2018-03-08T14:34:17.000Z</published>
    <updated>2018-03-09T01:50:34.000Z</updated>
    
    <summary type="html">
    
    </summary>
    
    
      <category term="iOS" scheme="http://yoursite.com/tags/iOS/"/>
    
  </entry>
  
  <entry>
    <title>不要抱怨，努力前行</title>
    <link href="http://yoursite.com/2018/03/07/%E4%B8%8D%E8%A6%81%E6%8A%B1%E6%80%A8%EF%BC%8C%E5%8A%AA%E5%8A%9B%E5%89%8D%E8%A1%8C/"/>
    <id>http://yoursite.com/2018/03/07/不要抱怨，努力前行/</id>
    <published>2018-03-07T02:54:14.000Z</published>
    <updated>2018-03-07T09:21:39.000Z</updated>
    
    <content type="html"><![CDATA[<pre><code>不要让抱怨再成为你前行的阻碍，放下这些抱怨，或许能加快前行的脚步。</code></pre><hr>]]></content>
    
    <summary type="html">
    
      
      
        &lt;pre&gt;&lt;code&gt;不要让抱怨再成为你前行的阻碍，放下这些抱怨，或许能加快前行的脚步。
&lt;/code&gt;&lt;/pre&gt;&lt;hr&gt;

      
    
    </summary>
    
      <category term="闲谈" scheme="http://yoursite.com/categories/%E9%97%B2%E8%B0%88/"/>
    
    
      <category term="杂文" scheme="http://yoursite.com/tags/%E6%9D%82%E6%96%87/"/>
    
      <category term="情感" scheme="http://yoursite.com/tags/%E6%83%85%E6%84%9F/"/>
    
  </entry>
  
  <entry>
    <title>iOS知识点温习（1）</title>
    <link href="http://yoursite.com/2018/03/07/hello-world/"/>
    <id>http://yoursite.com/2018/03/07/hello-world/</id>
    <published>2018-03-07T01:34:12.000Z</published>
    <updated>2018-03-08T01:23:51.000Z</updated>
    
    <content type="html"><![CDATA[<p>Q 1：Application 在执行main()函数之前，都做了什么？(之前从没考虑过此问题，在刷面试题的时候，发现很多人回答，就学习一下。)<br>Answer:  dyld: (the dynamic link editor)动态链接器<br>               ImageLoader: 用于辅助加载特定可执行文件格式的类，程序中对应实例可简称为image(如程序可执行文件，Framework库，bundle文件)<br>               Step 1:读取APP的可执行文件(Mach-o文件),获取dyld的路径；<br>               Step 2:开始加载dyld文件，初始化运行环境、开启缓存策略、加载程序相关依赖库；<br>               Step 3:交给ImageLoader读取image,包括各种资源（类、符号、protocol<br>               、Selector、IMP）；<br>               Step 4:runTime向dyld绑定了callback，当Image加载到内存后，dyld就会通知runTime进行处理<br>               Step 5:rumTime 调用map-images做解析处理<br>               Step 6:load-images调用call_load_methods方法，遍历所有加载进来的Class,按照继承层次依次调用Class的 load 和其他category的load方法<br>               Step 7:所有资源都已经被加载到内存中了<br>               Step 8:dyld调用了真正的main函数<br><a id="more"></a></p><p>Q 2：weak的实现原理是什么？</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Q 1：Application 在执行main()函数之前，都做了什么？(之前从没考虑过此问题，在刷面试题的时候，发现很多人回答，就学习一下。)&lt;br&gt;Answer:  dyld: (the dynamic link editor)动态链接器&lt;br&gt;               ImageLoader: 用于辅助加载特定可执行文件格式的类，程序中对应实例可简称为image(如程序可执行文件，Framework库，bundle文件)&lt;br&gt;               Step 1:读取APP的可执行文件(Mach-o文件),获取dyld的路径；&lt;br&gt;               Step 2:开始加载dyld文件，初始化运行环境、开启缓存策略、加载程序相关依赖库；&lt;br&gt;               Step 3:交给ImageLoader读取image,包括各种资源（类、符号、protocol&lt;br&gt;               、Selector、IMP）；&lt;br&gt;               Step 4:runTime向dyld绑定了callback，当Image加载到内存后，dyld就会通知runTime进行处理&lt;br&gt;               Step 5:rumTime 调用map-images做解析处理&lt;br&gt;               Step 6:load-images调用call_load_methods方法，遍历所有加载进来的Class,按照继承层次依次调用Class的 load 和其他category的load方法&lt;br&gt;               Step 7:所有资源都已经被加载到内存中了&lt;br&gt;               Step 8:dyld调用了真正的main函数&lt;br&gt;
    
    </summary>
    
      <category term="iOS开发" scheme="http://yoursite.com/categories/iOS%E5%BC%80%E5%8F%91/"/>
    
    
      <category term="iOS" scheme="http://yoursite.com/tags/iOS/"/>
    
  </entry>
  
</feed>
